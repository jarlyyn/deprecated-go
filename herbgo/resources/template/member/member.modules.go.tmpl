package {{.Name.Lower}}

import (
	"github.com/herb-go/util"
	"github.com/herb-go/member"		
	"github.com/herb-go/herb/cache"
	{{if .InstallSession -}}
	sessionmodule "modules/{{.Name.LowerWithParent}}/session"		
	{{- end}}
	cachemodule "modules/{{.Name.LowerWithParent}}/cache"	
	{{ if .InstallSQLUser -}}	
	"github.com/herb-go/providers/sql/sqluser"		
	{{- end}}
	{{ if not .DatabaseInstalled -}}
	"github.com/herb-go/herb/model/sql/db"
	{{- end}}
	"modules/database"		
)

//ModuleName module name
const ModuleName="800{{.Name.LowerWithParentDotSeparated}}"

{{ if .InstallSQLUser -}}	
{{if .DatabaseInstalled -}}
var userDb=database.SQL
{{- else -}}
var userDb db.Database
{{- end}}

var userFlags = sqluser.FlagWithAccount | sqluser.FlagWithPassword | sqluser.FlagWithToken | sqluser.FlagWithUser

//User sqluser component
var User = sqluser.New(userDb,userFlags)
{{- end}}

//Session member session.
{{if .InstallSession -}}
var Session=sessionmodule.Session
{{- else -}}
var Session *session.Store
{{- end}}

//Member {{.Name.Lower}} member  module.
var Member= member.New()
func initMemberProviders(){
		{{ if .InstallSQLUser -}}	
		User.AddTablePrefix("{{.Name.Lower}}_")
		Member.Install(User.Account())
		Member.Install(User.Token())
		Member.Install(User.User())
		Member.Install(User.Password())
		{{- end}}
}

func initMemberCache(){
		{{if .InstallCache -}}
		Member.StatusCache = cache.NewCollection(cachemodule.Cache, "Status", cache.DefualtTTL)
		Member.AccountsCache = cache.NewCollection(cachemodule.Cache, "Account", cache.DefualtTTL)
		Member.TokenCache = cache.NewCollection(cachemodule.Cache, "Token", cache.DefualtTTL)
		Member.RoleCache = cache.NewCollection(cachemodule.Cache, "Role", cache.DefualtTTL)
		Member.DataCache = cache.NewNode(cachemodule.Cache, "data")
		{{- else -}}
		{{- end}}
}
func init() {
	util.RegisterModule(ModuleName, func() {
		//Init registered initator which registered by RegisterInitiator
		util.Must(Member.Init(member.OptionCommon(Session)))
		Member.ContextName = member.ContextType("{{.Name.LowerWithParentDotSeparated}}")
		initMemberProviders()
		initMemberCache()
		util.InitOrderByName(ModuleName)
	})
}